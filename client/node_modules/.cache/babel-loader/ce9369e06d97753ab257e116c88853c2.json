{"ast":null,"code":"var _jsxFileName = \"/Users/anthony/Documents/react_router_start_point/client/src/components/Planning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Monday from './Monday';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Planning = ({\n  recipesList\n}) => {\n  _s();\n\n  const [updatedRecipes, setUpdatedRecipes] = useState([]);\n  const [monday, setMonday] = useState([]); // const [tuesday, setTuesday] = useState([]);\n  // const [wednesday, setWednesday] = useState([]);\n  // const [thursday, setThursday] = useState([]);\n  // const [friday, setFriday] = useState([]);\n  // const [saturday, setSaturday] = useState([]);\n  // const [sunday, setSunday] = useState([]);\n\n  useEffect(() => {\n    setUpdatedRecipes(recipesList);\n  }, [recipesList]);\n\n  const onClick = function () {\n    const breakfast = findTypicalBreakfast(updatedRecipes);\n    const dinnerRecipes = matchDinnerWithTypicalBreakfast(updatedRecipes); // const dinner = new Array(dinnerRecipes[Math.floor(Math.random() * dinnerRecipes.length)]);\n    // const mondayMenu = [...breakfast, ...dinner];\n    // setMonday(mondayMenu);\n  };\n\n  const findRecipesByType = function (recipes, meal) {\n    const recipesByType = recipes.filter(recipe => recipe.type === meal);\n    return recipesByType;\n  };\n\n  const findTypicalBreakfast = function (recipes) {\n    const breakfastRecipes = findRecipesByType(recipes, \"Breakfast\");\n    const typicalBreakfast = breakfastRecipes.filter(recipe => recipe.name === \"Sausage And Egg Salad\");\n    return typicalBreakfast;\n  }; // const matchDinnerWithTypicalBreakfast = function(recipes){\n  //     const breakfast = findTypicalBreakfast(updatedRecipes);\n  //     const dinnerRecipes = findRecipesByType(recipes, \"Dinner\");\n  //     let possibleDinner = dinnerRecipes\n  //     dinnerRecipes.forEach(function(recipe){\n  //         const index = dinnerRecipes.indexOf(recipe);\n  //         if((breakfast[0].protein + recipe.protein) <= 68.8){\n  //             dinnerRecipes.slice(index, 1);\n  //             console.log(index);\n  //         }\n  //         else if((breakfast[0].carbohydrate + recipe.carbohydrate) <= 25){\n  //             dinnerRecipes.slice(index, 1);\n  //         }\n  //         else if((breakfast[0].fat + recipe.fat) <= 70.9){\n  //             dinnerRecipes.shift(index, 1);\n  //         }\n  //     })\n  //     return possibleDinner;\n  // }\n\n\n  const matchDinnerWithTypicalBreakfast = function (recipe) {\n    if (30.2 + recipe.protein <= 68.8) {\n      return recipe;\n    } else if (+recipe.carbohydrate <= 25) {\n      return recipe;\n    } else if (breakfast[0].fat + recipe.fat <= 70.9) {\n      return recipe;\n    }\n  };\n\n  const dinners = updatedRecipes.filter(matchDinnerWithTypicalBreakfast());\n  console.log(dinners); // function findBreakfastRecipes(recipes){\n  //     const breakfast = recipes.filter(recipe => recipe.type === \"Breakfast\");\n  //     const indexSausageEggSalad = breakfast.indexOf(recipes.name === \"Sausage And Egg Salad\");\n  //     breakfast.splice(indexSausageEggSalad, 1);\n  //     return breakfast;\n  // }\n  // const recipesForDinner = findRecipesByType(allRecipes, \"Dinner\");\n  // const recipesForFish = findRecipesByType(allRecipes, \"Fish\");\n  // const recipesForMeat = findRecipesByType(allRecipes, \"Meat\");\n  // const recipesForVegetables = findRecipesByType(allRecipes, \"Vegetables\");\n  // function typicalBreakfast(recipes){\n  //     const sausageAndEggSalad = recipes.find(recipe => recipe.name === \"Sausage And Egg Salad\");\n  //     return sausageAndEggSalad;\n  // }\n  // const breakfastMondayToFriday = new Array(typicalBreakfast(recipesForBreakfast));\n  // const mondayDinner = recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)];\n  // const dinner = recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)];\n  // // const mondayMenu = [...dinner, ...mondayDinner];\n  // function addProtein(recipes){\n  //     const totalProtein = recipes.reduce((total, recipe) => recipe.protein + total, 0.0);\n  //     return totalProtein\n  // }\n  // const mondayProtein = addProtein([dinner, mondayDinner]);\n  // const mondayBreakfast = new Array(mondayBreakfastRecipe(recipesForBreakfast));\n  // const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n  // const mondayMenu = [...mondayBreakfast, ...mondayDinner];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Monday, {\n      monday: monday,\n      onClick: onClick,\n      dinners: dinners\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Planning, \"g7gGwZxITp2VeY4y4KgtRrulSmc=\");\n\n_c = Planning;\nexport default Planning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planning\");","map":{"version":3,"sources":["/Users/anthony/Documents/react_router_start_point/client/src/components/Planning.js"],"names":["React","useState","useEffect","Monday","Planning","recipesList","updatedRecipes","setUpdatedRecipes","monday","setMonday","onClick","breakfast","findTypicalBreakfast","dinnerRecipes","matchDinnerWithTypicalBreakfast","findRecipesByType","recipes","meal","recipesByType","filter","recipe","type","breakfastRecipes","typicalBreakfast","name","protein","carbohydrate","fat","dinners","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAmB;AAAA;;AAEhC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CAHgC,CAIhC;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,iBAAiB,CAACF,WAAD,CAAjB;AACH,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,QAAMK,OAAO,GAAG,YAAU;AACtB,UAAMC,SAAS,GAAGC,oBAAoB,CAACN,cAAD,CAAtC;AACA,UAAMO,aAAa,GAAGC,+BAA+B,CAACR,cAAD,CAArD,CAFsB,CAGtB;AACA;AACA;AACH,GAND;;AAQA,QAAMS,iBAAiB,GAAG,UAASC,OAAT,EAAkBC,IAAlB,EAAuB;AAC7C,UAAMC,aAAa,GAAGF,OAAO,CAACG,MAAR,CAAeC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBJ,IAAzC,CAAtB;AACA,WAAOC,aAAP;AACH,GAHD;;AAKA,QAAMN,oBAAoB,GAAG,UAASI,OAAT,EAAiB;AAC1C,UAAMM,gBAAgB,GAAGP,iBAAiB,CAACC,OAAD,EAAU,WAAV,CAA1C;AACA,UAAMO,gBAAgB,GAAGD,gBAAgB,CAACH,MAAjB,CAAwBC,MAAM,IAAIA,MAAM,CAACI,IAAP,KAAgB,uBAAlD,CAAzB;AACA,WAAOD,gBAAP;AACH,GAJD,CA5BgC,CAkChC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMT,+BAA+B,GAAG,UAASM,MAAT,EAAgB;AACpD,QAAI,OAAOA,MAAM,CAACK,OAAf,IAA2B,IAA9B,EAAmC;AAC/B,aAAOL,MAAP;AACH,KAFD,MAGK,IAAK,CAAEA,MAAM,CAACM,YAAX,IAA4B,EAA/B,EAAkC;AACnC,aAAON,MAAP;AACH,KAFI,MAGA,IAAIT,SAAS,CAAC,CAAD,CAAT,CAAagB,GAAb,GAAmBP,MAAM,CAACO,GAA3B,IAAmC,IAAtC,EAA2C;AAC5C,aAAOP,MAAP;AACH;AACJ,GAVD;;AAYA,QAAMQ,OAAO,GAAGtB,cAAc,CAACa,MAAf,CAAsBL,+BAA+B,EAArD,CAAhB;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EApEgC,CAsEhC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA,sBACI;AAAA,2BACI,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEpB,MAAhB;AAAwB,MAAA,OAAO,EAAEE,OAAjC;AAA0C,MAAA,OAAO,EAAEkB;AAAnD;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAMH,CA7GD;;GAAMxB,Q;;KAAAA,Q;AA+GN,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Monday from './Monday';\n\nconst Planning = ({recipesList}) => {\n\n    const [updatedRecipes, setUpdatedRecipes] = useState([]);\n    const [monday, setMonday] = useState([]);\n    // const [tuesday, setTuesday] = useState([]);\n    // const [wednesday, setWednesday] = useState([]);\n    // const [thursday, setThursday] = useState([]);\n    // const [friday, setFriday] = useState([]);\n    // const [saturday, setSaturday] = useState([]);\n    // const [sunday, setSunday] = useState([]);\n \n    useEffect(() => {\n        setUpdatedRecipes(recipesList)\n    }, [recipesList]);\n\n    const onClick = function(){\n        const breakfast = findTypicalBreakfast(updatedRecipes);\n        const dinnerRecipes = matchDinnerWithTypicalBreakfast(updatedRecipes);\n        // const dinner = new Array(dinnerRecipes[Math.floor(Math.random() * dinnerRecipes.length)]);\n        // const mondayMenu = [...breakfast, ...dinner];\n        // setMonday(mondayMenu);\n    }\n\n    const findRecipesByType = function(recipes, meal){\n        const recipesByType = recipes.filter(recipe => recipe.type === meal);\n        return recipesByType;\n    }\n\n    const findTypicalBreakfast = function(recipes){\n        const breakfastRecipes = findRecipesByType(recipes, \"Breakfast\");\n        const typicalBreakfast = breakfastRecipes.filter(recipe => recipe.name === \"Sausage And Egg Salad\");\n        return typicalBreakfast;\n    }\n\n    // const matchDinnerWithTypicalBreakfast = function(recipes){\n    //     const breakfast = findTypicalBreakfast(updatedRecipes);\n    //     const dinnerRecipes = findRecipesByType(recipes, \"Dinner\");\n\n    //     let possibleDinner = dinnerRecipes\n    //     dinnerRecipes.forEach(function(recipe){\n    //         const index = dinnerRecipes.indexOf(recipe);\n    //         if((breakfast[0].protein + recipe.protein) <= 68.8){\n    //             dinnerRecipes.slice(index, 1);\n    //             console.log(index);\n    //         }\n    //         else if((breakfast[0].carbohydrate + recipe.carbohydrate) <= 25){\n    //             dinnerRecipes.slice(index, 1);\n    //         }\n    //         else if((breakfast[0].fat + recipe.fat) <= 70.9){\n    //             dinnerRecipes.shift(index, 1);\n    //         }\n    //     })\n    //     return possibleDinner;\n    // }\n\n    const matchDinnerWithTypicalBreakfast = function(recipe){\n        if((30.2 + recipe.protein) <= 68.8){\n            return recipe;\n        }\n        else if(( + recipe.carbohydrate) <= 25){\n            return recipe;\n        }\n        else if((breakfast[0].fat + recipe.fat) <= 70.9){\n            return recipe;\n        }\n    }\n\n    const dinners = updatedRecipes.filter(matchDinnerWithTypicalBreakfast());\n    console.log(dinners);\n\n    // function findBreakfastRecipes(recipes){\n    //     const breakfast = recipes.filter(recipe => recipe.type === \"Breakfast\");\n    //     const indexSausageEggSalad = breakfast.indexOf(recipes.name === \"Sausage And Egg Salad\");\n    //     breakfast.splice(indexSausageEggSalad, 1);\n    //     return breakfast;\n    // }\n\n    // const recipesForDinner = findRecipesByType(allRecipes, \"Dinner\");\n    // const recipesForFish = findRecipesByType(allRecipes, \"Fish\");\n    // const recipesForMeat = findRecipesByType(allRecipes, \"Meat\");\n    // const recipesForVegetables = findRecipesByType(allRecipes, \"Vegetables\");\n\n    // function typicalBreakfast(recipes){\n    //     const sausageAndEggSalad = recipes.find(recipe => recipe.name === \"Sausage And Egg Salad\");\n    //     return sausageAndEggSalad;\n    // }\n\n    // const breakfastMondayToFriday = new Array(typicalBreakfast(recipesForBreakfast));\n    // const mondayDinner = recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)];\n    // const dinner = recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)];\n    // // const mondayMenu = [...dinner, ...mondayDinner];\n\n    // function addProtein(recipes){\n    //     const totalProtein = recipes.reduce((total, recipe) => recipe.protein + total, 0.0);\n    //     return totalProtein\n    // }\n\n    // const mondayProtein = addProtein([dinner, mondayDinner]);\n\n    // const mondayBreakfast = new Array(mondayBreakfastRecipe(recipesForBreakfast));\n    // const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n    // const mondayMenu = [...mondayBreakfast, ...mondayDinner];\n\n    return(\n        <>\n            <Monday monday={monday} onClick={onClick} dinners={dinners}/>\n        </>\n    )\n\n}\n\nexport default Planning;\n"]},"metadata":{},"sourceType":"module"}