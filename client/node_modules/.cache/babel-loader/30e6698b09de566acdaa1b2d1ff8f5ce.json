{"ast":null,"code":"var _jsxFileName = \"/Users/anthony/Documents/react_router_start_point/client/src/containers/PlanningContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport HappyKetoService from '../services/HappyKetoService';\nimport Planning from '../components/Planning.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlanningContainer = () => {\n  _s();\n\n  const [allRecipes, setAllRecipes] = useState([]);\n  const [macro, setMacro] = useState({\n    Protein: 60,\n    Carbs: 99,\n    Fats: 128\n  });\n  useEffect(() => {\n    HappyKetoService.getRecipes().then(recipes => setAllRecipes(recipes));\n  }, []); // function findBreakfast(recipes){\n  //     const breakfast = recipes.filter(recipe => recipe.type === \"Breakfast\");\n  //     const indexSausageEggSalad = breakfast.indexOf(recipes.name === \"Sausage And Egg Salad\");\n  //     breakfast.splice(indexSausageEggSalad, 1);\n  //     return breakfast;\n  // }\n\n  function findRecipesByType(recipes, meal) {\n    const recipesByType = recipes.filter(recipe => recipe.type === meal);\n    return recipesByType;\n  }\n\n  const recipesForBreakfast = findRecipesByType(allRecipes, \"Breakfast\");\n  const recipesForDinner = findRecipesByType(allRecipes, \"Dinner\");\n  const recipesForFish = findRecipesByType(allRecipes, \"Fish\");\n  const recipesForMeat = findRecipesByType(allRecipes, \"Meat\");\n  const recipesForVegetables = findRecipesByType(allRecipes, \"Vegetables\");\n\n  function typicalBreakfast(recipes) {\n    const sausageAndEggSalad = recipes.find(recipe => recipe.name === \"Sausage And Egg Salad\");\n    return sausageAndEggSalad;\n  }\n\n  const breakfastMondayToFriday = new Array(typicalBreakfast(recipesForBreakfast));\n  const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n  const mondayMenu = [...breakfastMondayToFriday, ...mondayDinner];\n\n  function addProtein(recipes) {\n    const totalProtein = recipes.reduce((total, recipe) => recipe.protein + total, 0.0);\n    return totalProtein;\n  }\n\n  let mondayProtein = addProtein({\n    name: \"Sausage and Veggie Frittata\",\n    portion: 2,\n    day: 2,\n    type: \"Dinner\",\n    protein: 40,\n    carbohydrate: 10,\n    fat: 32,\n    calories: 480\n  }, {\n    name: \"Melted Brie With Basil And Lemon Pesto\",\n    portion: 3,\n    day: 1,\n    type: \"Dinner\",\n    protein: 28.8,\n    carbohydrate: 6.9,\n    fat: 75,\n    calories: 828\n  }); // const mondayBreakfast = new Array(mondayBreakfastRecipe(recipesForBreakfast));\n  // const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n  // const mondayMenu = [...mondayBreakfast, ...mondayDinner];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Planning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"planning-container\",\n      children: /*#__PURE__*/_jsxDEV(Planning, {\n        mondayMenu: mondayMenu,\n        mondayProtein: mondayProtein\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PlanningContainer, \"bcX7s5q+Nenn5Aa+P3hEYiEQ9qo=\");\n\n_c = PlanningContainer;\nexport default PlanningContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanningContainer\");","map":{"version":3,"sources":["/Users/anthony/Documents/react_router_start_point/client/src/containers/PlanningContainer.js"],"names":["useState","useEffect","HappyKetoService","Planning","PlanningContainer","allRecipes","setAllRecipes","macro","setMacro","Protein","Carbs","Fats","getRecipes","then","recipes","findRecipesByType","meal","recipesByType","filter","recipe","type","recipesForBreakfast","recipesForDinner","recipesForFish","recipesForMeat","recipesForVegetables","typicalBreakfast","sausageAndEggSalad","find","name","breakfastMondayToFriday","Array","mondayDinner","Math","floor","random","length","mondayMenu","addProtein","totalProtein","reduce","total","protein","mondayProtein","portion","day","carbohydrate","fat","calories"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,QAAP,MAAqB,2BAArB;;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAE5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC;AAACS,IAAAA,OAAO,EAAE,EAAV;AAAcC,IAAAA,KAAK,EAAE,EAArB;AAAyBC,IAAAA,IAAI,EAAE;AAA/B,GAAD,CAAlC;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,gBAAgB,CAACU,UAAjB,GACCC,IADD,CACMC,OAAO,IAAIR,aAAa,CAACQ,OAAD,CAD9B;AAEH,GAHQ,EAGN,EAHM,CAAT,CAL4B,CAU5B;AACA;AACA;AACA;AACA;AACA;;AAEA,WAASC,iBAAT,CAA2BD,OAA3B,EAAoCE,IAApC,EAAyC;AACrC,UAAMC,aAAa,GAAGH,OAAO,CAACI,MAAR,CAAeC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBJ,IAAzC,CAAtB;AACA,WAAOC,aAAP;AACH;;AAED,QAAMI,mBAAmB,GAAGN,iBAAiB,CAACV,UAAD,EAAa,WAAb,CAA7C;AACA,QAAMiB,gBAAgB,GAAGP,iBAAiB,CAACV,UAAD,EAAa,QAAb,CAA1C;AACA,QAAMkB,cAAc,GAAGR,iBAAiB,CAACV,UAAD,EAAa,MAAb,CAAxC;AACA,QAAMmB,cAAc,GAAGT,iBAAiB,CAACV,UAAD,EAAa,MAAb,CAAxC;AACA,QAAMoB,oBAAoB,GAAGV,iBAAiB,CAACV,UAAD,EAAa,YAAb,CAA9C;;AAEA,WAASqB,gBAAT,CAA0BZ,OAA1B,EAAkC;AAC9B,UAAMa,kBAAkB,GAAGb,OAAO,CAACc,IAAR,CAAaT,MAAM,IAAIA,MAAM,CAACU,IAAP,KAAgB,uBAAvC,CAA3B;AACA,WAAOF,kBAAP;AACH;;AAED,QAAMG,uBAAuB,GAAG,IAAIC,KAAJ,CAAUL,gBAAgB,CAACL,mBAAD,CAA1B,CAAhC;AACA,QAAMW,YAAY,GAAG,IAAID,KAAJ,CAAUT,gBAAgB,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,gBAAgB,CAACc,MAA5C,CAAD,CAA1B,CAArB;AACA,QAAMC,UAAU,GAAG,CAAC,GAAGP,uBAAJ,EAA6B,GAAGE,YAAhC,CAAnB;;AAEA,WAASM,UAAT,CAAoBxB,OAApB,EAA4B;AACxB,UAAMyB,YAAY,GAAGzB,OAAO,CAAC0B,MAAR,CAAe,CAACC,KAAD,EAAQtB,MAAR,KAAmBA,MAAM,CAACuB,OAAP,GAAiBD,KAAnD,EAA0D,GAA1D,CAArB;AACA,WAAOF,YAAP;AACH;;AAED,MAAII,aAAa,GAAGL,UAAU,CAAC;AAC3BT,IAAAA,IAAI,EAAE,6BADqB;AAE3Be,IAAAA,OAAO,EAAE,CAFkB;AAG3BC,IAAAA,GAAG,EAAE,CAHsB;AAI3BzB,IAAAA,IAAI,EAAE,QAJqB;AAK3BsB,IAAAA,OAAO,EAAE,EALkB;AAM3BI,IAAAA,YAAY,EAAE,EANa;AAO3BC,IAAAA,GAAG,EAAE,EAPsB;AAQ3BC,IAAAA,QAAQ,EAAE;AARiB,GAAD,EAU9B;AACInB,IAAAA,IAAI,EAAE,wCADV;AAEIe,IAAAA,OAAO,EAAE,CAFb;AAGIC,IAAAA,GAAG,EAAE,CAHT;AAIIzB,IAAAA,IAAI,EAAE,QAJV;AAKIsB,IAAAA,OAAO,EAAE,IALb;AAMII,IAAAA,YAAY,EAAE,GANlB;AAOIC,IAAAA,GAAG,EAAE,EAPT;AAQIC,IAAAA,QAAQ,EAAE;AARd,GAV8B,CAA9B,CA1C4B,CAgE5B;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACI,QAAC,QAAD;AAAU,QAAA,UAAU,EAAEX,UAAtB;AAAkC,QAAA,aAAa,EAAEM;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA9ED;;GAAMvC,iB;;KAAAA,iB;AAgFN,eAAeA,iBAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport HappyKetoService from '../services/HappyKetoService';\nimport Planning from '../components/Planning.js';\n\nconst PlanningContainer = () => {\n\n    const [allRecipes, setAllRecipes] = useState([]);\n    const [macro, setMacro] = useState({Protein: 60, Carbs: 99, Fats: 128});\n\n    useEffect(() => {\n        HappyKetoService.getRecipes()\n        .then(recipes => setAllRecipes(recipes))\n    }, []);\n\n    // function findBreakfast(recipes){\n    //     const breakfast = recipes.filter(recipe => recipe.type === \"Breakfast\");\n    //     const indexSausageEggSalad = breakfast.indexOf(recipes.name === \"Sausage And Egg Salad\");\n    //     breakfast.splice(indexSausageEggSalad, 1);\n    //     return breakfast;\n    // }\n\n    function findRecipesByType(recipes, meal){\n        const recipesByType = recipes.filter(recipe => recipe.type === meal);\n        return recipesByType;\n    }\n\n    const recipesForBreakfast = findRecipesByType(allRecipes, \"Breakfast\");\n    const recipesForDinner = findRecipesByType(allRecipes, \"Dinner\");\n    const recipesForFish = findRecipesByType(allRecipes, \"Fish\");\n    const recipesForMeat = findRecipesByType(allRecipes, \"Meat\");\n    const recipesForVegetables = findRecipesByType(allRecipes, \"Vegetables\");\n\n    function typicalBreakfast(recipes){\n        const sausageAndEggSalad = recipes.find(recipe => recipe.name === \"Sausage And Egg Salad\");\n        return sausageAndEggSalad;\n    }\n\n    const breakfastMondayToFriday = new Array(typicalBreakfast(recipesForBreakfast));\n    const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n    const mondayMenu = [...breakfastMondayToFriday, ...mondayDinner];\n\n    function addProtein(recipes){\n        const totalProtein = recipes.reduce((total, recipe) => recipe.protein + total, 0.0);\n        return totalProtein\n    }\n\n    let mondayProtein = addProtein({\n        name: \"Sausage and Veggie Frittata\",\n        portion: 2,\n        day: 2,\n        type: \"Dinner\",\n        protein: 40,\n        carbohydrate: 10,\n        fat: 32,\n        calories: 480\n    },\n    {\n        name: \"Melted Brie With Basil And Lemon Pesto\",\n        portion: 3,\n        day: 1,\n        type: \"Dinner\",\n        protein: 28.8,\n        carbohydrate: 6.9,\n        fat: 75,\n        calories: 828\n    });\n\n\n    // const mondayBreakfast = new Array(mondayBreakfastRecipe(recipesForBreakfast));\n    // const mondayDinner = new Array(recipesForDinner[Math.floor(Math.random() * recipesForDinner.length)]);\n    // const mondayMenu = [...mondayBreakfast, ...mondayDinner];\n\n    return(\n        <div className=\"main\">\n            <h1>Your Planning</h1>\n            <div className=\"line\"></div>\n            <div className=\"planning-container\">\n                <Planning mondayMenu={mondayMenu} mondayProtein={mondayProtein}/>\n            </div>\n        </div>\n    );\n\n}\n\nexport default PlanningContainer;\n"]},"metadata":{},"sourceType":"module"}